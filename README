==================================================================================================
 ImageToolBox: a set of small tools for image processing
==================================================================================================

This project contains simple command line tools to process image files.
Most code parts were automatically generated by LLMs such as ChatGPT and Gemini.

Most tools support JPEG/TIFF/PNG/WEBP as input files and output files.  The format is determined
by the file extension (.jpg, .tif, .tiff, .png, .webp).

Python3 is required to run scripts.  Required libraries are the following.

  OpenCV2, NumPy, ExifRead

To install them, run the following command.

  $ pip3 install opencv-python-headless numpy exifread

Optionally, those tools can be executed implicitly.

  ExifTool

----------------

itb_stack.py : Stack and merge images into one.

This command is useful to create pseudo-STF images, HDR images, less-noise images, focus-stacked
images, panoramic images, and videos.

For pseudo-STF (smooth transfer focus), take multiple images with various apertures.  If you can
use aperture bracketing or do it manually, simply input the images.  They are stacked and merged
into an image by average composition.

  $ itb_stack.py input*.jpg -o output.jpg

In fact, weighted average composition is more suitable for pseudo-STF.  The weight of each image
is calculated as the radius of the circle of confusion.  It means that images taken with wider
aperture contribute more to the final image.

  $ itb_stack.py input*.jpg -o output.jpg -m w

Most cameras support exposure bracketing.  If you use it on the S mode with a fixed ISO, images
are taken with various apertures but exposure is different.  Then, set -ax option, which adjusts
exposure of each input image before merging.

  $ itb_stack.py input*.jpg -o output.jpg -ax -m w

If bracketing is done handheld without a tripod, pictures will be shifted a little, which
causes blur after merging.  In that case, aligning input images is useful.  In most cases, the
ORB aligner is fast and good enough.

  $ itb_stack.py input*.jpg -o output.jpg -ax -m w -a o

To create an HDR (high dynamic range) image from images taken by exposure bracketing, run the
following command.  It merges input images by Debevec's method and applies tone mapping by
Reinhard's method.

  $ itb_stack.py input*.jpg -o output.jpg -m d -t r

Alignment is also useful for creating HDR images of handheld pictures.

  $ itb_stack.py input*.jpg -o output.jpg -m d -t r -a o

By default, brightness of the merged image is calibrated to match the average brightness of the
input images.  If you calibrate brightness yourself, suppress the auto adjustment.

  $ itb_stack.py input*.jpg -o output.jpg -nr

You can adjust brightness and contrast of the merged image manually.  If an option parameter
starts with "-", use "=" as the separator.

  $ itb_stack.py input*.jpg -o output.jpg --slog 1.3 --sigmoid 2.4
  $ itb_stack.py input*.jpg -o output.jpg --slog=-0.5 --sigmoid=-3.2

You can adjust contrast of the merged image automatically using histogram equalization.  If the
parameter is positive (from 0.1 to 10.0), advanced algorithm CLAHE is used.  If the parameter is
negative, naive global algorithm is used.

  $ itb_stack.py input*.jpg -o output.jpg --histeq 1.2
  $ itb_stack.py input*.jpg -o output.jpg --histeq=-1

Merging multiple pictures taken with high sensitivity is effective in suppressing noise.  Whereas
median composition is widely used, the "denoise" mode provides better results in most cases.

  $ itb_stack.py input*.jpg -o output.jpg -m denoise -a o

If image alignment failures, ignoring unaligned images from merging is a practical solution.

  $ itb_stack.py input*.jpg -o output.jpg -m denoise -a o -iu

Focus stacking of images taken with different focus distance is also supported.  In this case,
using ECC aligner is sometimes better than SIFT.

  $ itb_stack.py input*.jpg -o output.jpg -m f -nr -a e

Putting images in a grid is also supported.  You specify the number of columns.

  $ itb_stack.py input*.jpg -o output.jpg -m grid:columns=2:margin=10:background=ff0

Stitching images as a panoramic image is also supported.  "-fm" fills the black margin.

  $ itb_stack.py input*.jpg -o output.jpg -m s -nr -fm

You can trim and scale the merged image.  For trimming, you set percentages for each edge like
margin spec in CSS (top,right,bottom,left).  For scaling, you set both the width and height, or
just the longer side of the new image.  Perspective correction by specifying four coordinate
points is also supported.

  $ itb_stack.py input*.jpg -o output.jpg --trim "30,20,30,20" --scale "1920,1080"
  $ itb_stack.py input*.jpg -o output.jpg --trim "30,20" --scale "1920"
  $ itb_stack.py input*.jpg -o output.jpg --pers "10,10,90,10,100,100,0,100"

You can put a caption on the merged image.  By default, the font size is 20% of sqrt(area); the
font color is white; the position is center.

  $ itb_stack.py input*.jpg -o output.jpg --caption "hello"

You can change the size, color, and position.  The following sets the size 0.5, the color #ff0,
and the position bottom-left.

  $ itb_stack.py input*.jpg -o output.jpg --caption "hello|0.5|ff0|bl"

White balance can be adjusted with various configurations.  As with auto exposure, this correction
is done before input images are merged.

  $ itb_stack.py input*.jpg -o output.jpg -wb auto        # Auto detection
  $ itb_stack.py input*.jpg -o output.jpg -wb auto-temp   # Auto color temperature detection
  $ itb_stack.py input*.jpg -o output.jpg -wb auto-scene  # Auto scene detection
  $ itb_stack.py input*.jpg -o output.jpg -wb 5500        # for light source at 5500K color
  $ itb_stack.py input*.jpg -o output.jpg -wb 13,15,10    # for list source RGB ratio 13:15:10

Bokeh can be enhanced in an intelligent manner while image detail is preserved.  This is
especially useful for portraiture.

  $ itb_stack.py input*.jpg -o output.jpg --portrait auto  # well-balanced
  $ itb_stack.py input*.jpg -o output.jpg --portrait 6     # max 2^6-pixel blur
  $ itb_stack.py input*.jpg -o output.jpg --portrait auto:decay=0.2  # adjust strength
  $ itb_stack.py input*.jpg -o output.jpg --portrait 4:repeat=2      # smoother bokeh

If "exiftool" command is available on your system, EXIF metadata and ICC profile of the first
input image are preserved in the merged image.

If the output file name has an extension of videos (.mp4 and .mov), a video whose frames are
the input images is created.  You can specify the FPS (frames per second).

  $ itb_stack.py input*.jpg -o output.mp4 --output-video-fps 0.5

If each input file name has an extension of videos (.mp4 and .mov), frames are extracted as
input images.  You can specify the FPS (frames per second).

  $ itb_stack.py input.mp4 -o output.jpg --input-video-fps 0.5

If the output file name has an extension ".npz", an NumPy archive whose frames are the input
float32 images is created.  It can be used as an input file.  As with the video output, aligned
images are saved in the file so it is useful as a cache to omit costly image alignment.

  $ itb_stack.py input*.jpg -o cache.npz -a s
  $ itb_stack.py cache.npz -o output.jpg -m d -t r

The workflow of this command is the following.

  1: All input image files are loaded and converted to lenear RGB channels.
  2: Optionally, white balance of each image is adjusted.
       use -wb or --white-balance to specify "auto" or RGB weights like 10,13,11
  3: Optionally, brightness of each image is adjusted to their average.
       use -ax or --average-exposure to enable it
  4: Optionally, position of each image is adjusted to the first one.
       use -a or --align to specify the mode
  5: Multiple images are merged into one.
       use -m or --merge to specify the mode
  6: For HDR images, tone mapping is applied to be normal LDR images.
       use -t or --tonemap to specify the mode
  7: Brightness of the merged image is adjusted to the input average.
       use -nr or --no-restore to disable it.
  8: Optionally, various postprocessing methods are applied.
       --gamma to modify brightness by a gamma function
       --slog to modify brightness by a scaled logarithmic function
       --sigmoid to adjust contrast by a scaled sigmoid function
       --histeq to apply histgram equalization
       --denoise, --blur, --unsharp, --portrait to adjust noise/bokeh/sharpness
       --trim, --pers, --scale to change geometry
       --vignetting, --caption to apply finishing touches
  8: The merged image is saved as a file.

The following merging methods are supported.

  - average (a) : average (arithmetic mean) composition (default)
  - median (mdn) : median composition, suitable for noise reduction
  - geomean (gm) : geometric mean composition, suitable for noise reduction
  - minimum (min) : minimum value composition, suitable for dynamic light sources
  - maximum (max) : maximum value composition, suitable for star trailing
  - denoise (dn) : blurred geometric mean-based median composition, suitable for noise reduction
  - weighted (w) : weighted average composition, suitable for pseudo-STF
  - debevec (d) : Debevec's method, to create an HDR image, for a natural result
  - robertson (r) : Robertson's method, to create an HDR image, for the most recognizable shapes
  - mergens (m) : Mergen's method, to create a pseudo-HDR image by blending
  - focus (f) : focus stacking using Laplacian filter
  - grid (g) : to create a grid of images
  - stitch (s) : to create a panoramic image

Debevec, Robertson, and Mergen support tone mapping for post-processing.  The following methods
are supported.

  - linear (l) : linear conversion
  - reinhard (r) : Reinhard's method, based on human recognition model
  - drago (d) : Drago's method, based on logarithmic model
  - mantiuk (m) : Mantiuk's method, maximizing local contrast to enhance detail

The following aligning methods are supported.

  - none : to do nothing (default)
  - orb (o) : ORB, fast but less accurate
  - sift (s) : SIFT, slow but more accurate, robust to scale and rotation too
  - ecc (e) : ECC, good balance, optimized to small shifts from camera shake
  - hugin (h) : to call Hugin's align_image_stack as an external command

In summary, to create a pseudo-STF image, averaging exposure and weighted average composition
produces the best results in most cases.

  $ itb_stack.py input*.jpg -o output.jpg -ax -m w -a o

To create an HDR image, combining the Debevec and Robertson methods produces the best results in
most cases.

  $ itb_stack.py input*.jpg -o output.jpg -m d -t r -a o

The focus stacking algorithm uses softmax of local contrast for composition weight.  It is an
interesting fact that this algorithm is useful to create HDR images.  Averaging exposure and
applying focus stacking produces contrasty and natural images.

  $ itb_stack.py input*.jpg -o output.jpg -ax -m f -a o

To reduce the effect of camera shake during a bracketing shoot, utilizing an alignment method is
recommended.  Usually ORB is enough as in the above examples.  However, each method has
its pros and cons.  Thus, try different ones: ORB, SIFT, ECC, and Hugin in sequence.  You can
add tuning parameters too.

  $ itb_stack.py input*.jpg -o output.jpg -a o:nfeatures=1000    # faster ORB
  $ itb_stack.py input*.jpg -o output.jpg -a s:nfeatures=100000  # more accurate SIFT
  $ itb_stack.py input*.jpg -o output.jpg -a e:use_affine=false  # check shift only

It utilizes BGMbM (blurred geometric mean-based median) composition, where multiplicative noises
in low-contrast area are selectively suppressed.

The "denoise" merging mode utilizes BGMbM (blurred geometric mean-based median) composition, where
multiplicative noises in low-contrast area are selectively suppressed.  The effect can be
calibrated by options.  clip_limit=0.4 and blur_radius=3 are default values.

  $ itb_stack.py input*.jpg -o output.jpg -m denoise -a o:clip_limit=0.25              # sharper
  $ itb_stack.py input*.jpg -o output.jpg -m denoise -a o:clip_limit=0.5:blur_radius=4 # softer

For unit testing, run the following command.

  $ ./test_itb_stack.py

== END OF FILE ==
